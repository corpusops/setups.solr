---
corpusops_core_projects_path: /srv/projects
# app version
cops_solr__version: |-
  {%- if 'COPS_IMG' in ansible_env %}
  {%- set v = ansible_env.COPS_IMG.split(':')[1].replace('-dev', '') %}
  {%- else %}
  {%- set v = '5.4.0' %}
  {%- endif %}{{v}}
cops_solr_version: "{{cops_solr__version}}"
cops_solr_major: "{{cops_solr_version[0]}}"
# app domain & users
cops_solr_admin_password: "secretnRdq44wXFA1Ui9h"
cops_solr_drupal_password: "secret1OKIw5ak5lJ9odz"
cops_solr_http_users:
- {user: admin,  password: "{{vars['cops_solr_admin_password']}}", cores: [sample, drupal],}
- {user: drupal, password: "{{vars['cops_solr_drupal_password']}}", cores: [drupal]}
# users than have full right to edit file in the container
# When this is enabled, the project user/group is also granted full perms
# (attention, uids!)
# users than have full right to edit file in the container
# When this is enabled, the project user/group is also granted full perms
# (attention, uids!)
cops_solr__supereditors_paths:
- "{{vars['cops_solr_data_root']}}"
# space separated string of uids to allow to write inside
# projetct directories (used in development through posix ACLS setter)
cops_solr__supereditors: >-
  {{ ansible_env.get(
      'SUPEREDITORS', cops_supereditors|default('')
     ) | copsf_splitstrip | to_json }}
cops_solr_supereditors_paths: "{{vars['cops_solr__supereditors_paths']}}"
cops_solr_supereditors: "{{vars['cops_solr__supereditors']}}"
cops_solr_deb_packages: [apache2-utils, python-passlib, lsof]
cops_solr_rh_packages: [httpd-tools, python-passlib]
# extra conf to add to pgconf (directly added to a tuning conf file (string))
cops_solr_domain: "{{ansible_fqdn}}"
# for internal monitoring
cops_solr_query_host: "{% if '_local_' in cops_solr_bind_host
  %}127.0.0.1{% elif '_site_' in cops_solr_bind_host
  %}{{ansible_fqdn}}{% else
  %}{{vars['cops_solr_bind_host']}}{%endif%}"
cops_solr_etc: "{{vars['cops_solr_data_root']}}/etc"
cops_solr_name: 'solr'
cops_solr_user: "{{vars['cops_solr_name']}}-user"
cops_solr_group: "{{vars['cops_solr_name']}}-group"
cops_solr_projects_dir: "{{corpusops_vars.projects_path}}"
cops_solr_project_sdir: "{{vars['cops_solr_name']}}"
cops_solr_project_dir: "{{vars['cops_solr_projects_dir']}}/{{vars['cops_solr_project_sdir']}}"
cops_solr_project_root: "{{vars['cops_solr_project_dir']}}/project"
cops_solr_data_root: "{{vars['cops_solr_project_dir']}}/data"
cops_solr_fixperms: "{{vars['cops_solr_project_dir']}}/fixperms.sh"
cops_solr_fixperms_cron_periodicity: "0 */2 * * *"
cops_solr_fixperms_cron: "/etc/cron.d/{{vars['cops_solr_name']}}-fixperms"
# overrides this dict with values of cops_solr_env !
cops_solr_env_overrides: {}
cops_solr_env:
  # EG: ES_JAVA_OPTS: "-Xms4000m -Xmx4000m"
  SOLR_HEAP: "{{vars['cops_solr_mem']}}"
  SOLR_OPTS: ""
  SOLR_LAUNCHER: "solr"
  SOLR_LAUNCHER_ARGS: "start -f -m $SOLR_HEAP"
  SOLR_HTTP_HOST: "{{vars['cops_solr_host']}}"
  SOLR_HTTP_PORT: "{{vars['cops_solr_port']}}"
cops_solr_host: "127.0.0.1"
cops_solr_maxlogs: 20
cops_solr_port: "8983"
cops_solr_secret_variables: []
cops_solr_cops_format_resolve_topdb: false
cops_solr_cops_do_format_resolve: false
cops_solr_cops_sub_namespaces:
  s: {}
  lifecycle: {}
  force: {}
  nginx: {}
cops_solr_solr_bind_host: '127.0.0.1'
# templates
## entry point
cops_solr_provision_dir: /provision_dir
cops_solr_ep_template: "../templates/app_entry_point"
cops_solr_ep_playbook: ".ansible/playbooks/site.yml"
cops_solr_ep_main_ep: "/entry_point"
# Docker entrypoint settings, tags for cli and vars for playbook reuse via
# conditionals
# global orchestration steps (db, code sync, web & workers prereqs, solr config)
cops_solr_become: true
# service
cops_solr_service: "solr"
cops_solr_services: ["{{vars['cops_solr_service']}}"]
cops_solr_rhandlers: [restart_cops_solr]
# use in docker (via a vault):
cops_solr_reconfigure_services: |-
  {% set ret = [] %}
  {% if ansible_virtualization_type in ['docker'] %}
  {% set _ = ret.append("post-start-{{vars['cops_solr_service']}}") %}
  {% endif %}
  {{ ret | to_json }}
cops_solr_activated: true
# Layout, files & configs
cops_solr_real_root: "{{vars['cops_solr_project_root']}}/solr-{{vars['cops_solr_version']}}"
#
cops_solr_instance_root: "{{vars['cops_solr_project_root']}}/solr-instance-{{vars['cops_solr_version']}}"
cops_solr_instance_server_root: "{{vars['cops_solr_instance_root']}}/server"
#
#
cops_solr_root: "{{vars['cops_solr_project_root']}}/solr"
cops_solr_server_root: "{{vars['cops_solr_root']}}/server"
#
cops_solr_logs: "{{vars['cops_solr_data_root']}}/logs"
cops_solr_data: "{{vars['cops_solr_data_root']}}/data"
#
cops_solr_bind_host: "_local_,_site_"
cops_solr_sha1_verify: true
# defaults to 'default' or can be selected 'version major'
cops_solr_filetest: [bin/solr]
# re-computed in tasks/vars.yml
# ENVIRONMENT VARIABLES always win !
cops_solr_mem: "2g"
cops_solr_bn: "solr-{{vars['cops_solr_version']}}"
cops_solr_tb: "{{vars['cops_solr_bn']}}.tgz"
cops_solr_url: "http://archive.apache.org/dist/lucene/solr/{{vars['cops_solr_version']}}/{{vars['cops_solr_tb']}}"
cops_solr_sha1_url: "{{vars['cops_solr_url']}}.sha1"
cops_solr_version_m: "{{cops_solr_version[0]}}"
cops_solr_sha1file: "{{vars['cops_solr_real_root']}}/sha1_{{vars['cops_solr_version']}}"
# set this to a specific interface if neccessary
# cops_solr_es_bind_host: '127.0.0.1'
# templates
## nginx
cops_solr_nginx_top_template: "../templates/nginx.top.conf"
cops_solr_nginx_content_template: "../templates/nginx.content.conf"
## app
cops_solr_service_cmd: "{{vars['cops_solr_root']}}/bin/run.sh"
cops_solr_limits_nofile: 65536
cops_solr_limits_nproc: 4096
# Reverse proxy
cops_solr_default_vhost_is_default_server: false
cops_solr_htpasswd: "/etc/nginx/{{vars['cops_solr_name']}}-htpasswd"
cops_solr_ssl_protected: false
cops_solr_nginx: {}
cops_solr_nginx_install: "{{cops_solr_has_reverse_proxy}}"
cops_solr_nginx_domain: "{{ansible_fqdn}}"
cops_solr_nginx_basename: "corpus-{{vars['cops_solr_name']}}"
cops_solr_nginx_is_default_server: true
cops_solr_nginx_ssl_protected: "{{cops_solr_ssl_protected}}"
cops_solr_nginx_htpasswd: "{{vars['cops_solr_htpasswd']}}"
cops_solr_nginx_services_nginx_reload_state: reloaded
cops_solr_nginx_ssl_cert: ""
cops_solr_nginx_ssl_key: ""
cops_solr_nginx_loglevel: crit
cops_solr_nginx_upstream_name: "{{vars['cops_solr_name']}}"
# Layout, files & configs
cops_solr_stickymode: "2"
cops_solr_notlinked:
  root: ["server"]
  server: ["contexts", "etc", "logs", "solr", "resources"]
# $projectroot/solr-xxx
#
# $projectroot/solr                                  -> $projectroot/solr-instance-xxx
#
# $projectroot/solr-instance-xxx/
# $projectroot/solr-instance-xxx/eachotherdir        -> $projectroot/solr-xxx/$i
#
# $projectroot/solr-instance-xxx/server
# $projectroot/solr-instance-xxx/server/etc
# $projectroot/solr-instance-xxx/server/resources
# $projectroot/solr-instance-xxx/server/logs         -> $logs
# $projectroot/solr-instance-xxx/server/solr         -> $data
# $projectroot/solr-instance-xxx/server/eachotherdir -> $projectroot/server/solr-xxx/$i
cops_solr_files: "{{vars['cops_solr_files_default']}}"
cops_solr_files_default:
  - {path: "{{vars['cops_solr_projects_dir']}}",
     owner: root, group: root, state: directory}
  - {path: "{{vars['cops_solr_project_dir']}}",
     owner: root, group: root, state: directory}
  - {path: "{{vars['cops_solr_project_root']}}",
     owner: "{{vars['cops_solr_user']}}", group: "{{vars['cops_solr_group']}}",
     state: directory, mode: "{{vars['cops_solr_stickymode']}}755"}
  - {path: "{{vars['cops_solr_data_root']}}",
     owner: "{{vars['cops_solr_user']}}", group: "{{vars['cops_solr_group']}}",
     state: directory, mode: "{{vars['cops_solr_stickymode']}}755"}
  - {path: "{{vars['cops_solr_data']}}",
     owner: "{{vars['cops_solr_user']}}", group: "{{vars['cops_solr_group']}}",
     state: directory, mode: "{{vars['cops_solr_stickymode']}}755"}
  - {path: "{{vars['cops_solr_logs']}}",
     owner: "{{vars['cops_solr_user']}}", group: "{{vars['cops_solr_group']}}",
     state: directory, mode: "{{vars['cops_solr_stickymode']}}755"}
  - {path: "{{vars['cops_solr_real_root']}}",
     owner: "{{vars['cops_solr_user']}}", group: "{{vars['cops_solr_group']}}",
     state: directory, mode: "{{vars['cops_solr_stickymode']}}755"}
  - {path: "{{vars['cops_solr_instance_root']}}",
     owner: "{{vars['cops_solr_user']}}", group: "{{vars['cops_solr_group']}}",
     state: directory, mode: "{{vars['cops_solr_stickymode']}}755"}
  - {path: "{{vars['cops_solr_instance_server_root']}}",
     owner: "{{vars['cops_solr_user']}}", group: "{{vars['cops_solr_group']}}",
     state: directory, mode: "{{vars['cops_solr_stickymode']}}755"}
  - {path: "{{vars['cops_solr_instance_server_root']}}/configsets",
     owner: "{{vars['cops_solr_user']}}", group: "{{vars['cops_solr_group']}}",
     state: directory, mode: "{{vars['cops_solr_stickymode']}}755"}
  - {path: "{{vars['cops_solr_instance_server_root']}}/etc",
     owner: "{{vars['cops_solr_user']}}", group: "{{vars['cops_solr_group']}}",
     state: directory, mode: "{{vars['cops_solr_stickymode']}}755"}
  - {path: "{{vars['cops_solr_instance_server_root']}}/contexts",
     owner: "{{vars['cops_solr_user']}}", group: "{{vars['cops_solr_group']}}",
     state: directory, mode: "{{vars['cops_solr_stickymode']}}755"}
  - {path: "{{vars['cops_solr_instance_server_root']}}/resources",
     owner: "{{vars['cops_solr_user']}}", group: "{{vars['cops_solr_group']}}",
     state: directory, mode: "{{vars['cops_solr_stickymode']}}755"}
  - {path: "{{vars['cops_solr_instance_server_root']}}/solr", src: "{{vars['cops_solr_data']}}", state: link, force: true}
  - {path: "{{vars['cops_solr_instance_server_root']}}/logs", src: "{{vars['cops_solr_logs']}}", state: link, force: true}
  - {path: "{{vars['cops_solr_root']}}", src: "{{vars['cops_solr_instance_root']}}", state: link, force: true}
cops_solr_configs: "{{vars['cops_solr_configs_default']}}"
cops_solr_configs_default:
  - {src: "../templates/app.service",
     dest: "/etc/systemd/system/{{vars['cops_solr_service']}}.service",
     mode: "0644",
     owner: "{{vars['cops_solr_user']}}", group: "{{vars['cops_solr_group']}}"}
  - {src: "../templates/run.sh",
     dest: "{{vars['cops_solr_real_root']}}/bin/run.sh", mode: "0755",
     owner: "{{vars['cops_solr_user']}}", group: "{{vars['cops_solr_group']}}"}
  - {src: "../templates/solr.env",
     dest: "{{vars['cops_solr_real_root']}}/bin/solr.env", mode: "0644",
     owner: "{{vars['cops_solr_user']}}", group: "{{vars['cops_solr_group']}}"}
cops_solr_start_cmd: 'java -jar start.jar'
cops_solr_start_args: []
cops_solr_context: solr
cops_solr_scheme: ''
cops_solr_jetty: "{{vars['cops_solr_data_root']}}/solr/root"
# attention, rsync args !
cops_solr_bundle_sync: ["start.jar",  "logs/", "lib/", "webapps/", "solr-webapp/"]
cops_solr_bundle_top_sync: ['contrib', 'dist']
# JETTY and solr base configuration templates folders
cops_solr_jetty_conf: 'jetty'
cops_solr_solr_conf:  'solr'
# define here each core, and its configuration template folder
cops_solr_cores:
- sample: 'sample_core'
- drupal: 'drupal_core'
# if any users are defined, solr will be also HTTP BASED (simple auth) restricted
cops_solr_fixperms_configs:
  - {src: "../templates/fixperms.sh",
     dest: "{{vars['cops_solr_fixperms']}}", mode: "0755",
     owner: root, group: root}
cops_solr_ep_configs:
  # script to reconfigure image before and after systemd is launched
  - {src: "../templates/reconfigure.sh",
     dest: "{{vars['cops_solr_reconfigure']}}",
     mode: "0755",
     owner: "root",
     group: "root"}
  - {src: "../templates/post-start-reconfigure.service",
     dest: "/etc/systemd/system/post-start-{{vars['cops_solr_service']}}.service",
     mode: "0644",
     owner: "root",
     group: "root"}
  - {src: "{{vars['cops_solr_ep_template']}}",
     dest: "/app_entry_point", mode: "0755",
     owner: root, group: root}
# SystemD based reconfigure unit settings
cops_solr_reconfigure_service_stderr: "journal{% if ansible_virtualization_type in ['docker']%}+console{%endif%}"
cops_solr_reconfigure_service_stdout: "journal{% if ansible_virtualization_type in ['docker']%}+console{%endif%}"
cops_solr_reconfigure_unit_after: "network.target solr.service"
cops_solr_reconfigure_install_wantedby: "multi-user.target"
cops_solr_reconfigure: "{{vars['cops_solr_provision_dir']}}/reconfigure.sh"
cops_solr_extra_configs: "{{vars['cops_solr_extra_configs_defaults']}}"
cops_solr_extra_configs_defaults:
- {dest: "server/etc/jetty-http.xml"}
- {dest: "server/etc/jetty.xml"}
- {dest: "server/etc/webdefault.xml"}
- {dest: "server/etc/jetty-ssl.xml"}
- {dest: "server/etc/jetty-https.xml"}
- {dest: "server/etc/jetty-https-ssl.xml"}
- {dest: "server/resources/jetty-logging.properties"}
- {dest: "server/resources/log4j.properties"}
- {dest: "server/contexts/solr-jetty-context.xml"}
- {dest: "server/solr/solr.xml"}
cops_solr_reconfigure_passenv: >
  COPS_ROOT COPS_IMG NO_SILENT NO_OUTPUT NONINTERACTIVE
  ANSIBLE_CWD ANSIBLE_PLAY ANSIBLE_VARARGS ANSIBLE_ARGS
  A_VAULTS_FOLDERS A_VAULTS A_EXTRA_VAULTS
  A_INVENTORY A_ENV_NAME NO_DEFAULT_VAULTS
cops_solr_reconfigure_verbosity: "-v"
# Code synchronnisation settings (FORCE_COPS_PROVISION_PUSH_CODE to force)
cops_solr_push_codes_cwd: "{{vars['cops_cwd']}}"
cops_solr_push_codes_sync_mode: "{{ (
  cops_installer_mode in ['vagrant'] or
  ansible_virtualization_type in ['docker']
  ) and 'rsync' or 'git' }}"
cops_solr_push_codes_file_tests:
  git: []
  rsync: [".git"]
cops_solr_push_codes_rsync_opts:
  git:   ["-azv",                           "--exclude", "local/*", "--exclude", ".vagrant", "--exclude", "*.retry"]
  rsync: ["-azv", "--include", ".git/**/*", "--exclude", "local/*", "--exclude", ".vagrant", "--exclude", "*.retry"]
cops_solr_push_codes_rsync_submodule_opts:
  git:   ["-azv", "--exclude", "*.retry"]
  rsync: ["-azv", "--exclude", "*.retry"]
cops_solr_push_codes:
- path: "{{vars['cops_solr_project_root']}}"
  origin_path: "{{vars['cops_solr_push_codes_cwd']}}"
  sync_mode: "{{cops_solr_push_codes_sync_mode}}"
  rsync_opts: "{{cops_solr_push_codes_rsync_opts[cops_solr_push_codes_sync_mode]}}"
  file_tests: "{{cops_solr_push_codes_file_tests[cops_solr_push_codes_sync_mode]}}"
  owner: "{{vars['cops_solr_user']}}"
  group: "{{vars['cops_solr_group']}}"
  sub_paths: []
  #- path: local/setups.solr
  #  rsync_opts: "{{cops_solr_push_codes_rsync_submodule_opts[cops_solr_push_codes_sync_mode]}}"
  #  is_submodule: true
# SSH deploy settings -> env vault
cops_deploy_ssh_key_paths:
  deploy:
    path: "{{'local/.ssh/deploy_key'|copsf_abspath}}"
    pub: "{{cops_deploy_ssh_pub_key|default('')}}"
    #  ssh-rsa xxx x@y
    # should be in encypted vault
    private: "{{cops_deploy_ssh_key|default('')}}"
    # -----BEGIN RSA PRIVATE KEY-----
    # -----END RSA PRIVATE KEY-----
# vim:set ft=sls:
